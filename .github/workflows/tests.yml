name: Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  backend-tests:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: lead_capture_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, fileinfo
          coverage: xdebug

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Setup testing environment
        run: |
          cp .env.example .env.testing
          # Configure testing environment variables
          sed -i 's/APP_ENV=local/APP_ENV=testing/' .env.testing
          sed -i 's/APP_DEBUG=true/APP_DEBUG=true/' .env.testing
          sed -i 's/DB_DATABASE=lead_capture/DB_DATABASE=lead_capture_test/' .env.testing
          sed -i 's/DB_USERNAME=root/DB_USERNAME=root/' .env.testing
          sed -i 's/DB_PASSWORD=/DB_PASSWORD=/' .env.testing
          sed -i 's/SESSION_DRIVER=database/SESSION_DRIVER=array/' .env.testing
          sed -i 's/CACHE_STORE=database/CACHE_STORE=array/' .env.testing
          sed -i 's/MAIL_MAILER=log/MAIL_MAILER=array/' .env.testing
          # Add missing test environment variables
          echo "QUEUE_CONNECTION=sync" >> .env.testing
          echo "CACHE_DRIVER=array" >> .env.testing

      - name: Generate application key
        run: php artisan key:generate --env=testing

      - name: Clear all caches before testing
        run: |
          php artisan config:clear
          php artisan cache:clear
          php artisan view:clear
          php artisan route:clear

      - name: Create Database
        run: |
          mysql --host 127.0.0.1 --port 3306 -uroot -e "CREATE DATABASE IF NOT EXISTS lead_capture_test;"

      - name: Run Database Migrations
        run: php artisan migrate:fresh --env=testing --force

      - name: Seed Database
        run: php artisan db:seed --class=PlatformSeeder --env=testing --force

      - name: Run Backend Tests
        run: php artisan test --env=testing --coverage-clover=coverage.xml

      - name: Upload Backend Coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: backend
          name: backend-coverage

  frontend-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install NPM dependencies
        run: npm ci

      - name: Run Frontend Tests
        run: npm run test:coverage

      - name: Upload Frontend Coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  code-quality:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: phpstan, php-cs-fixer

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress

      - name: Install NPM dependencies
        run: npm ci

      - name: Run PHP CS Fixer (dry-run)
        run: vendor/bin/php-cs-fixer fix --dry-run --diff --allow-risky=yes

      - name: Run ESLint
        run: npm run lint -- --max-warnings 10

      - name: Run Prettier Check
        run: npm run format:check

  build-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Composer dependencies
        run: composer install --optimize-autoloader --no-dev

      - name: Install NPM dependencies
        run: npm ci

      - name: Build Frontend Assets
        run: npm run build

      - name: Test Laravel Optimization
        run: |
          cp .env.example .env
          php artisan key:generate
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          php artisan optimize
